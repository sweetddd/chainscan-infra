 pipeline {
  agent {
    node {
      label 'nodejs'
    }
  }

  environment {
     REGISTRY = 'registry.cn-beijing.aliyuncs.com/pox'
     APP_NAME = 'watcher-contribution'
  }

  stages {
    stage('check out from git') {
      steps {
        checkout([$class: 'GitSCM',
        branches: [[name: 'master']],
        extensions: [[$class: 'SubmoduleOption',
        disableSubmodules: false,
        parentCredentials: true,
        recursiveSubmodules: true,
        reference: '', trackingSubmodules: true]],
        userRemoteConfigs: [[credentialsId: 'gitaccount', url: 'http://git.everylink.ai/paas/chainscan-infra.git']]])
      }
    }
    stage('build & push') {
      steps {
        dir('watcher/watcher-plugin/watcher-plugin-contribution') {
            container('nodejs') {
                withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,credentialsId : 'dockerhub' ,usernameVariable : 'DOCKER_USERNAME' ,)]) {
                    sh 'echo docker --version'
                    sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                    sh 'docker build -f Dockerfile -t $REGISTRY/$APP_NAME:SNAPSHOT-$BUILD_NUMBER .'
                    sh 'docker push $REGISTRY/$APP_NAME:SNAPSHOT-$BUILD_NUMBER'
                }
            }
        }
      }
    }
    stage('deploy to sandbox') {
      steps {
        kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, configs: 'watcher/watcher-plugin/watcher-plugin-contribution/deploy/sandbox/**', kubeconfigId: 'kubeconfig')
      }
    }
    stage('build & push to production') {
      steps {
        input(message: 'Waiting for audit @eric  ', submitter: 'eric,admin')
        dir('watcher/watcher-plugin/watcher-plugin-contribution') {
          container('nodejs') {
            withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,credentialsId : 'dockerhub' ,usernameVariable : 'DOCKER_USERNAME' ,)]) {
              sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
              sh 'docker build -f Dockerfile.production -t $REGISTRY/$APP_NAME:RELEASE-$BUILD_NUMBER .'
              sh 'docker push $REGISTRY/$APP_NAME:RELEASE-$BUILD_NUMBER'
            }
          }
        }
      }
    }
    stage('deploy to production') {
      steps {
        kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, configs: 'watcher/watcher-plugin/watcher-plugin-contribution/deploy/production/**', kubeconfigId: 'kubeconfig-prd')
      }
    }
  }
}
