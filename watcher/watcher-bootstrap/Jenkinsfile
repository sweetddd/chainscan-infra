pipeline {
  agent {
    node {
      label 'maven-jdk11'
    }
  }

    environment {
      REGISTRY = 'registry.cn-beijing.aliyuncs.com/pox'
      APP_NAME = 'watcher-bootstrap'
    }

  stages {
    stage('git') {
      steps {
        git(url: 'http://git.everylink.ai/paas/chainscan-infra.git', credentialsId: 'gitaccount', changelog: true, poll: false)
      }
    }
    stage('build') {
      steps {
        dir('watcher/watcher-bootstrap') {
            container('maven-jdk11') {
                sh 'mvn -version'
                sh 'mvn -version'
                sh 'mvn clean'
                sh 'mvn -DskipTests -Drat.skip=true clean package'
                withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,credentialsId : 'dockerhub' ,usernameVariable : 'DOCKER_USERNAME' ,)]) {
                    sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                    sh 'docker build -f Dockerfile -t $REGISTRY/$APP_NAME:SNAPSHOT-$BUILD_NUMBER .'
                    sh 'docker push $REGISTRY/$APP_NAME:SNAPSHOT-$BUILD_NUMBER'
                }
            }
        }
      }
    }
    stage('deploy to sandbox') {
      steps {
         container ('maven-jdk11') {
                          withCredentials([
                              kubeconfigFile(
                              credentialsId: 'kubeconfig',
                              variable: 'KUBECONFIG')
                              ]) {
                              sh 'envsubst < watcher/watcher-bootstrap/deploy/sandbox/node-dtx/deployment.yaml | kubectl apply -f -'
                              sh 'envsubst < watcher/watcher-bootstrap/deploy/sandbox/node-dtx/service.yaml | kubectl apply -f -'
                               sh 'envsubst < watcher/watcher-bootstrap/deploy/sandbox/node-bnb/deployment.yaml | kubectl apply -f -'
                                sh 'envsubst < watcher/watcher-bootstrap/deploy/sandbox/node-bnb/service.yaml | kubectl apply -f -'
                                 sh 'envsubst < watcher/watcher-bootstrap/deploy/sandbox/node-goerli/deployment.yaml | kubectl apply -f -'
                              sh 'envsubst < watcher/watcher-bootstrap/deploy/sandbox/node-goerli/service.yaml | kubectl apply -f -'
                          }
                     }
      }
    }
    stage('deploy to production') {
       steps {
         input(message: 'Waiting for audit @eric  ', submitter: 'eric,admin')
          container ('maven-jdk11') {
                                   withCredentials([
                                       kubeconfigFile(
                                       credentialsId: 'kubeconfig-prd',
                                       variable: 'KUBECONFIG')
                                       ]) {
                                       sh 'envsubst < watcher/watcher-bootstrap/deploy/production/deployment.yaml | kubectl apply -f -'
                                       sh 'envsubst < watcher/watcher-bootstrap/deploy/production/service.yaml | kubectl apply -f -'
                                   }
                              }
       }
     }


     stage('deploy to mainnet') {
        steps {
          input(message: 'Waiting for audit @eric  ', submitter: 'eric,admin')
           container ('maven-jdk11') {
                                             withCredentials([
                                                 kubeconfigFile(
                                                 credentialsId: 'kubeconfig-prd',
                                                 variable: 'KUBECONFIG')
                                                 ]) {
                                                 sh 'envsubst < watcher/watcher-bootstrap/deploy/main/deployment.yaml | kubectl apply -f -'
                                                 sh 'envsubst < watcher/watcher-bootstrap/deploy/main/service.yaml | kubectl apply -f -'
                                             }
                                        }
        }
      }
  }
}
